{"version":3,"sources":["components/singleArticle/singleArticle.js","components/allArticles/allArticles.js","components/header/header.js","App.js","serviceWorker.js","index.js","components/allArticles/allArticles.module.css","components/header/header.module.css","components/singleArticle/singleArticle.module.css"],"names":["SingleArticle","console","log","this","props","articles","react_default","a","createElement","className","ClassNames","href","url","Article","urlToImage","image","src","alt","title","Header","author","description","Component","AllArticles","state","_this2","axios","get","then","res","data","setState","catch","error","body","lib_default","columnWidth","monitorImagesLoaded","map","arg","i","singleArticle","key","React","header","App","allArticles","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"0NAuBeA,mLAjBX,OADAC,QAAQC,IAAIC,KAAKC,MAAMC,UAErBC,EAAAC,EAAAC,cAAA,KAAGC,UAAWC,IAAWH,EAAGI,KAAMR,KAAKC,MAAMC,SAASO,KACpDN,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAWG,SACzBP,EAAAC,EAAAC,cAAA,WACGL,KAAKC,MAAMC,SAASS,WAAaR,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAWK,MAAOC,IAAKb,KAAKC,MAAMC,SAASS,WAAYG,IAAI,IAAIC,MAAOf,KAAKC,MAAMC,SAASa,QAAY,MAE1JZ,EAAAC,EAAAC,cAAA,WACGL,KAAKC,MAAMC,SAASa,MAAQZ,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAWS,QAAShB,KAAKC,MAAMC,SAASa,OAAe,KACnGf,KAAKC,MAAMC,SAASe,OAASd,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAWU,QAASjB,KAAKC,MAAMC,SAASe,QAAgB,KACrGjB,KAAKC,MAAMC,SAASgB,YAAcf,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAWW,aAAclB,KAAKC,MAAMC,SAASgB,aAAqB,eAZrGC,wDCwCbC,6MAnCbC,MAAQ,CACNnB,SAAU,uFAGQ,IAAAoB,EAAAtB,KAClBuB,IACGC,IAAI,2FAGJC,KAAK,SAAAC,GACJ,IAAMxB,EAAWwB,EAAIC,KAAKzB,SAE1BoB,EAAKM,SAAS,CAAE1B,SAAUA,MAE3B2B,MAAM,SAAAC,GACLhC,QAAQC,IAAI+B,sCAKhB,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAWwB,MACzB5B,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CACE6B,YAAa,IACbC,qBAAqB,GACpBlC,KAAKqB,MAAMnB,SAASiC,IAAI,SAACC,EAAKC,GAC7B,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,CAAeC,IAAKF,EAAGnC,SAAUkC,eA3B1BI,IAAMrB,4BCKjBH,mLAPP,OACIb,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAWkC,gBAHrBtB,aCaNuB,mLATX,OACEvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACoC,EAAD,MACAtC,EAAAC,EAAAC,cAACsC,EAAD,cALUxB,aCOEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC,mCElInBC,EAAAC,QAAA,CAAkB7B,KAAA,+CCAlB4B,EAAAC,QAAA,CAAkBnB,OAAA,0HCAlBkB,EAAAC,QAAA,CAAkBlD,QAAA,+BAAAN,EAAA,yBAAAQ,MAAA,6BAAAI,OAAA,8BAAAC,OAAA,8BAAAC,YAAA","file":"static/js/main.c0348c0e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ClassNames from './singleArticle.module.css';\n\nclass SingleArticle extends Component {\n  render() {\n    console.log(this.props.articles);\n    return (\n      <a className={ClassNames.a} href={this.props.articles.url}>\n        <div className={ClassNames.Article}>\n          <div>\n            {this.props.articles.urlToImage ? <img className={ClassNames.image} src={this.props.articles.urlToImage} alt=' ' title={this.props.articles.title} /> : null}\n          </div>\n          <div>\n            {this.props.articles.title ? <div className={ClassNames.Header}>{this.props.articles.title}</div> : null}\n            {this.props.articles.author ? <div className={ClassNames.author}>{this.props.articles.author}</div> : null}\n            {this.props.articles.description ? <div className={ClassNames.description}>{this.props.articles.description}</div> : null}\n          </div>\n        </div>\n      </a>\n    );\n  }\n}\n\nexport default SingleArticle;\n","import React from 'react';\nimport axios from 'axios';\nimport SingleArticle from '../singleArticle/singleArticle';\nimport StackGrid from \"react-stack-grid\";\nimport ReactLoading from \"react-loading\";\nimport ClassNames from \"./allArticles.module.css\";\n\nclass AllArticles extends React.Component {\n  state = {\n    articles: []\n  }\n\n  componentDidMount() {\n    axios\n      .get('https://newsapi.org/v2/top-headlines?' +\n        'country=in&' +\n        'apiKey=1fe94e1f7eb747b3a5879a48ba736409')\n      .then(res => {\n        const articles = res.data.articles;\n\n        this.setState({ articles: articles });\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  render() {\n    return (\n      <div className={ClassNames.body}>\n        <StackGrid\n          columnWidth={300}\n          monitorImagesLoaded={true}>\n          {this.state.articles.map((arg, i) => {\n            return <SingleArticle key={i} articles={arg} />;\n          })}\n        </StackGrid>\n      </div>\n\n    );\n  }\n}\n\nexport default AllArticles;","import React, { Component } from 'react';\nimport ClassNames from './header.module.css';\n\nclass Header extends Component {\n    render() {\n        return (\n            <header className={ClassNames.header}>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport './App.css';\nimport AllArticles from './components/allArticles/allArticles';\nimport Header from './components/header/header';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header/>\n        <AllArticles />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"allArticles_body__1cktI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__1rL5x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Article\":\"singleArticle_Article__1FR5H\",\"a\":\"singleArticle_a__1eLH9\",\"image\":\"singleArticle_image__2pnvo\",\"Header\":\"singleArticle_Header__3Ydwg\",\"author\":\"singleArticle_author__mx07R\",\"description\":\"singleArticle_description__3orf3\"};"],"sourceRoot":""}